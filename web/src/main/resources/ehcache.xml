<?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd"
	maxBytesLocalHeap="300M" updateCheck="false">
	<!-- CacheManager에 의해 관리되는 캐시의 메모리를 300M로 제한 -->

	<!-- 임시저장 경로를 설정 -->
	<diskStore path="java.io.tmpdir" />
	<!--
	Cache에 저장할 레퍼런스의 최대값을 100000으로 지정,
	maxDepthExceededBehavior = "continue" :  초과 된 최대 깊이에 대해 경고하지만 크기가 조정 된 요소를 계속 탐색
	maxDepthExceededBehavior = "abort" : 순회를 중지하고 부분적으로 계산 된 크기를 즉시 반환
	-->
	<sizeOfPolicy maxDepth="100000" maxDepthExceededBehavior="continue"/>

	<!-- default Cache 설정 (반드시 선언해야 하는 Cache) -->
	<defaultCache
		eternal="false"
		timeToIdleSeconds="0"
		timeToLiveSeconds="1200"
		overflowToDisk="false"
		diskPersistent="false"
		diskExpiryThreadIntervalSeconds="120"
		memoryStoreEvictionPolicy="LRU">
	</defaultCache>

	<!--
		mainCache
		eternal: 영속성 캐시 설정 (지워지는 캐시인지?) (external = "true"이면, timeToIdleSecond, timeToLiveSeconds 설정이 무시됨)
		timeToIdleSecond: 해당 초동안 캐시가 호출 되지 않으면 삭제
		timeToLiveSeconds: 해당 초가 지나면 캐시가 삭제
		overflowToDisk: 오버플로우 된 항목에 대해 disk에 저장할 지 여부
		diskPersistent: 캐시를 disk에 저장하여, 서버 로드 시 캐시를 말아 둘지 설정
		diskExpiryThreadIntervalSeconds: Disk Expiry 스레드의 작업 수행 간격 설정
		memoryStoreEvictionPolicy: 캐시의 객체 수가 maxEntriesLocalHeap에 도달하면, 객체를 추가하고 제거하는 정책 설정
		  - LRU: 가장 오랫동안 호출 되지 않은 캐시를 삭제
		  - LFU: 호출 빈도가 가장 적은 캐시를 삭제
		  - FIFO: First In First Out, 캐시가 생성된 순서대로 가장 오래된 캐시를 삭제
	-->
	<cache name="codeCache"
		eternal="false"
		timeToIdleSeconds="600"
		timeToLiveSeconds="1800"
		overflowToDisk="false"
		diskPersistent="false"
		diskExpiryThreadIntervalSeconds="120"
		memoryStoreEvictionPolicy="LRU">
	</cache>

</ehcache>