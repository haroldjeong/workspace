<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	role-mapper.xml
	@author jh.park (DEEP.FINE)

	// Guide
	[jdbcType]
		BIT
		FLOAT
		CHAR
		TIMESTAMP
		OTHER
		UNDEFINED
		TINYINT
		REAL
		VARCHAR
		BINARY
		BLOB
		NVARCHAR
		SMALLINT
		DOUBLE
		LONGVARCHAR
		VARBINARY
		CLOB
		NCHAR
		INTEGER
		NUMERIC
		DATE
		LONGVARBINARY
		BOOLEAN
		NCLOB
		BIGINT
		DECIMAL
		TIME
		NULL
		CURSOR
-->
<mapper namespace="go.gg.cms.core.role">
	<!-- 공통 검색조건 -->
	<sql id="commonWhere">
		<if test="searchKeyword != null and searchKeyword != ''">
			<choose>
				<when test="searchCondition == 'name'">
					AND	name like '%' || #{searchKeyword} || '%'
				</when>
			</choose>
		</if>
	</sql>

	<!-- 공통 정렬조건 -->
	<sql id="commonOrder">
		<if test="sort == null">
			ORDER BY reg_date DESC
		</if>
		<if test="sort != null">
			<foreach item="item" index="index" collection="sort" open="ORDER BY " separator=", " close=" ">
				${item.property} ${item.direction}
			</foreach>
		</if>
	</sql>

	<!-- 목록 조회 -->
	<select id="findList" parameterType="Role" resultType="Role">
		/* SQL_ID : go.gg.cms.core.role.findList */
		<![CDATA[
			SELECT
				id AS id
				, role_cd AS role_cd
				, name AS name
				, use_yn AS use_yn
				, reg_id AS reg_id
				, reg_ip AS reg_ip
				, reg_date AS reg_date
				, reg_agent AS reg_agent
				, mod_id AS mod_id
				, mod_ip AS mod_ip
				, mod_date AS mod_date
				, mod_agent AS mod_agent
				, role_desc AS role_desc
			FROM tb_role
			WHERE
				del_yn = 'N'
		]]>
		<include refid="commonWhere"/>
		<include refid="commonOrder"/>
		OFFSET (#{pageIndex} - 1) * #{pageUnit} LIMIT #{pageUnit}
	</select>

	<!-- 목록 건수 조회 -->
	<select id="countList" parameterType="Role" resultType="int">
		/* SQL_ID : go.gg.cms.core.role.countList */
		<![CDATA[
			SELECT COUNT(id) AS cnt
			FROM tb_role
			WHERE
				del_yn = 'N'
		]]>
		<include refid="commonWhere"/>
	</select>

	<!-- 상세 조회 -->
	<select id="findDetail" parameterType="Role" resultType="Role">
		/* SQL_ID : go.gg.cms.core.role.findDetail */
		<![CDATA[
			SELECT
				id AS id
				, role_cd AS role_cd
				, name AS name
				, use_yn AS use_yn
				, reg_id AS reg_id
				, reg_ip AS reg_ip
				, reg_date AS reg_date
				, reg_agent AS reg_agent
				, mod_id AS mod_id
				, mod_ip AS mod_ip
				, mod_date AS mod_date
				, mod_agent AS mod_agent
				, role_desc AS role_desc
			FROM tb_role
			WHERE
				id = #{id}::uuid
				AND del_yn = 'N'
		]]>
	</select>

	<!-- 정보 입력 (마스터) -->
	<insert id="insert" parameterType="Role">
		/* SQL_ID : go.gg.cms.core.role.insert */
		<![CDATA[
		INSERT INTO tb_role (
			id
			, role_cd
			, name
			, use_yn
			, reg_id
			, reg_ip
			, reg_date
			, reg_agent
			, role_desc
			, del_yn
		) VALUES (
			#{id}::uuid
			, #{roleCd}
			, #{name}
			, #{useYn}
			, #{regId}::uuid
			, #{regIp}
			, now()
			, #{regAgent}
			, #{roleDesc}
			, 'N'
		)
		]]>
	</insert>

	<!-- 정보 수정 (마스터) -->
	<update id="update" parameterType="Role">
		/* SQL_ID : go.gg.cms.core.role.update */
		<![CDATA[
		UPDATE tb_role SET
			  role_cd = #{roleCd}
			, name = #{name}
			, use_yn = #{useYn}
			, mod_id = #{modId}::uuid
			, mod_ip = #{modIp}
			, mod_date = now()
			, mod_agent = #{modAgent}
			, role_desc = #{roleDesc}
		WHERE
			id = #{id}::uuid
		]]>
	</update>

	<!-- 정보 삭제 -->
	<update id="delete" parameterType="Role">
		/* SQL_ID : go.gg.cms.core.role.delete */
		<![CDATA[
		UPDATE tb_role SET
			del_yn = 'Y'
			, mod_id = #{modId}::uuid
			, mod_ip = #{modIp}
			, mod_date = now()
			, mod_agent = #{modAgent}
		WHERE
			id = #{id}::uuid
		]]>
	</update>

	<!-- 공통메뉴 전체목록 조회 -->
	<select id="findMenuAll" parameterType="CommonMenu" resultType="CommonMenu">
		/* SQL_ID : go.gg.cms.core.role.findMenuAll */
		<![CDATA[
			WITH RECURSIVE MENU_LIST (id, disp_cd, parent_id, disp_seq, link_url, link_type, icon_type, use_yn, depth, path_id, path_cd, path_name, path_seq, cycle) AS
			(
			  SELECT a.id::TEXT
			    , a.disp_cd::TEXT
			    , a.parent_id::TEXT
			    , a.disp_seq
			    , a.link_url
			    , a.link_type
			    , a.icon_type
			    , a.use_yn
			    , 1 AS depth
			    , ARRAY[a.id::TEXT]
			    , ARRAY[a.disp_cd::TEXT]
			    , ARRAY['ROOT'::TEXT]
			    , ARRAY[a.disp_seq::TEXT]
			    , false
			    , false
			    , false
			  FROM tb_menu a
			  WHERE a.disp_cd = 'ROOT'
			        AND a.parent_id IS NULL
			  UNION ALL
			  SELECT a.id::TEXT
			    , a.disp_cd::TEXT
			    , a.parent_id::TEXT
			    , a.disp_seq
			    , a.link_url
			    , a.link_type
			    , a.icon_type
			    , a.use_yn
			    , b.depth + 1
			    , ARRAY_APPEND(b.path_id, a.id::TEXT)
			    , ARRAY_APPEND(b.path_cd, a.disp_cd::TEXT)
			    , ARRAY_APPEND(b.path_name, ml.name::TEXT)
			    , ARRAY_APPEND(b.path_seq, a.disp_seq::TEXT)
			    , a.id::TEXT = ANY(b.path_id)
			    , a.disp_cd::TEXT = ANY(b.path_cd)
			    , a.disp_seq::TEXT = ANY(b.path_seq)
			  FROM tb_menu AS a
			    INNER JOIN tb_menu_ml AS ml
			    ON a.id = ml.parent_id
			    INNER JOIN MENU_LIST AS b
			    ON a.parent_id::TEXT = b.id
			        AND a.del_yn = 'N'
		]]>
		<if test="searchUseYn != null and searchUseYn != ''">
			AND a.use_yn = 'Y'
		</if>
		<![CDATA[
			        AND ml.lang_cd = 'ko'
			        AND NOT CYCLE
			)
			SELECT mn.id
			  , mn.disp_cd AS cd
			  , mn.parent_id
			  , ml.name
			  , ml.short_desc AS shrt_desc
			  , ml.long_desc AS long_desc
			  , mn.disp_seq AS seq
			  , mn.use_yn
			  , mn.depth
			  , mn.link_url
			  , mn.link_type
			  , mn.icon_type
			  , regexp_replace(REPLACE(mn.path_id::TEXT, ',', '.'), '[}{"]', '', 'g') AS path_id
			  , regexp_replace(REPLACE(mn.path_cd::TEXT, ',', '.'), '[}{"]', '', 'g') AS path_cd
			  , regexp_replace(REPLACE(mn.path_name::TEXT, ',', '.'), '[}{"]', '', 'g') AS path_name
			  , mn.path_seq
			  , (SELECT COUNT(id) FROM tb_menu a WHERE a.del_yn = 'N' AND mn.id = a.parent_id::TEXT) AS child_cnt
				]]>
			  <if test="roleId != null and roleId != ''">
			  , COALESCE(mrm.read_yn, 'N') AS read_yn
			  , COALESCE(mrm.write_yn, 'N') AS write_yn
			  , COALESCE(mrm.down_yn, 'N') AS down_yn
			  , COALESCE(mrm.delete_yn, 'N') AS delete_yn
			  </if>

			FROM MENU_LIST AS mn
			  LEFT OUTER JOIN tb_menu_ml AS ml
			    ON mn.id = ml.parent_id::TEXT
			   <if test="roleId != null and roleId != ''">
			  LEFT OUTER JOIN tb_menu_role_mapp AS mrm
			    ON mn.id = mrm.menu_id::TEXT
				AND mrm.role_id = #{roleId}::uuid
				</if>
			WHERE ml.lang_cd = 'ko'
			/* ORDER BY path_seq */
			ORDER BY seq

	</select>

	<delete id="deleteMenuRole" parameterType="Role">
		/* SQL_ID : go.gg.cms.core.role.deleteMenuRole */
		<![CDATA[
		DELETE FROM tb_menu_role_mapp
		WHERE
			role_id = #{id}::uuid
		]]>
	</delete>
	<!-- 정보 입력 (메뉴 Role 매핑 테이블) -->
	<insert id="insertMenuRole" parameterType="Role">
		/* SQL_ID : go.gg.cms.core.role.insertMenuRole */
		INSERT INTO tb_menu_role_mapp (
			id
			, menu_id
			, role_id
			, reg_id
			, reg_ip
			, reg_date
			, reg_agent
			, read_yn
			, write_yn
			, delete_yn
			, down_yn
		) VALUES
		<foreach collection="menus" item="menu" separator=" , ">
			(
				uuid_generate_v4()
				,#{menu}::uuid
				,#{id}::uuid
				, #{regId}::uuid
				, #{regIp}
				, now()
				, #{regAgent}
				, #{readYn}
				, #{writeYn}
				, #{deleteYn}
				, #{downYn}
			)

		</foreach>

	</insert>



</mapper>
